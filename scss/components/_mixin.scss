// Mixin Start here

// Gradient Mixin

@mixin navGradient($args...) {
	background: -o-linear-gradient($args);
	background: -moz-linear-gradient($args);
	background: -webkit-linear-gradient($args);
	background: linear-gradient($args);
}

// Box shadow Mixin

@mixin box-shadow($leftshadow, $topshadow, $blurshadow, $colorShadow) {
	-webkit-box-shadow: $leftshadow $topshadow $blurshadow $colorShadow;
	-moz-box-shadow: $leftshadow $topshadow $blurshadow $colorShadow;
	box-shadow: $leftshadow $topshadow $blurshadow $colorShadow;
}

// Transition Mixin

@mixin transition($transiton) {
	-webkit-transition: $transiton;
	-moz-transition: $transiton;
	-ms-transition: $transiton;
	-o-transition: $transiton;
	transition: $transiton;
}

// Padding And Margin Mixin

@mixin margin-padding($m-direction, $m-amount, $p-direction, $p-amount) {
	@if $m-direction == all {
		margin: $m-amount;
	} @else {
		margin-#{$m-direction}: $m-amount;
	}
	@if $p-direction == all {
		padding: $p-amount;
	} @else {
		padding-#{$p-direction}: $p-amount;
	}
}

// Position Mixin

@mixin center($position) {
	position: absolute;

	@if $position == "vertical" {
		top: 50%;
		-webkit-transform: translateY(-50%);
		-ms-transform: translateY(-50%);
		transform: translateY(-50%);
	} @else if $position == "horizontal" {
		left: 50%;
		-webkit-transform: translateX(-50%);
		-ms-transform: translateX(-50%);
		transform: translate(-50%);
	} @else if $position == "both" {
		top: 50%;
		left: 50%;
		-webkit-transform: translate(-50%, -50%);
		-ms-transform: translate(-50%, -50%);
		transform: translate(-50%, -50%);
	}
}

// Usage

// @include center(vertical);

// Gradient Mixin

@mixin background-gradient($start-color, $middle-color, $end-color, $orientation) {
	background: $start-color;

	@if $orientation == "vertical" {
		background: -webkit-linear-gradient(top, $start-color, $middle-color, $end-color);
		background: linear-gradient(to bottom, $start-color, $middle-color, $end-color);
	} @else if $orientation == "horizontal" {
		background: -moz-gradient(171deg, $start-color, $middle-color, $end-color);
		background: -o-(171deg, $start-color, $middle-color, $end-color);
		background: -ms-(171deg, $start-color, $middle-color, $end-color);
		background: -webkit-linear-gradient(171deg, $start-color, $middle-color, $end-color);
		background: linear-gradient(171deg, $start-color, $middle-color, $end-color);
	} @else {
		background: -webkit-radial-gradient(center, ellipse cover, $start-color, $middle-color, $end-color);
		background: radial-gradient(ellipse at center, $start-color, $middle-color, $end-color);
	}
}

// Usage

// .gradient {
//   @include background-gradient(#07c, #06f, vertical);
// }

// Multiple Elements Mixin

@mixin spacing($margin, $border, $padding) {
	margin: $margin;
	border: $border;
	padding: $padding;
}

// Usage

// @include spacing(20px, border:1px solid #000, 20px);

// Opacity Mixin

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity = $opacity-ie);
}

// Usage

// @include opacity(0.5);

// Position Mixin

@mixin position($position, $args) {
	@each $o in top right bottom left {
		$i: index($args, $o);
		@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
			#{$o}: nth($args, $i + 1);
		}
	}
	position: $position;
}


// Positioning helpers
@mixin absolute($args: "") {
	@include position(absolute, $args);
}

@mixin fixed($args: "") {
	@include position(fixed, $args);
}

@mixin relative($args: "") {
	@include position(relative, $args);
}



// Usage

// @include absolute(top 0 right 0 bottom 0 right 0);


// KeyFrame Mixins

@mixin keyframes($name) {
	@-webkit-keyframes #{$name} {
		@content;
	}

	@-moz-keyframes #{$name} {
		@content;
	}

	@keyframes #{$name} {
		@content;
	}
}

// Center Block Mixin

@mixin center-block {
	display: $display-block;
	margin-left: $margin-left-auto;
	margin-right: $margin-right-auto;
}

// Usage

// @include center-block;

// Input Placeholder Mixin

@mixin input-placeholder {
	&.placeholder {
		@content;
	}
	&:-moz-placeholder {
		@content;
		opacity: 1;
	}
	&::-moz-placeholder {
		@content;
		opacity: 1;
	}
	&:-ms-input-placeholder {
		@content;
	}
	&::-webkit-input-placeholder {
		@content;
	}
}

// Usage

//  @include input-placeholder;

// Appearence Mixin

@mixin appearance($val: none) {
	-webkit-appearance: $val;
	-moz-appearance: $val;
	appearance: $val;
}

// Usage 

// @include appearance(none);


// Truncate Three dots Mixin

@mixin truncate($truncation-boundary) {
	max-width: $truncation-boundary;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

// Usage 

// @include truncate;


// Font size and line height mixin

@mixin font-rem($font-size, $line-height: 0) {
	font-size: $font-size;
	font-size: ($font-size / $rem-base-font) * 1rem;
	@if ($line-height > 0) {
		line-height: $line-height;
		line-height: ($line-height / $rem-base-font) * 1rem;
	}
}

// Usage

// @include font-rem(14px, 24px);


// Width height px to rem mixin

@mixin w-h-rem($width, $height: 0) {
	width: $width;
	width: ($width / $rem-base-font) * 1rem;
	@if ($height > 0) {
		height: $height;
		height: ($height / $rem-base-font) * 1rem;
	}
}

// Usage

//   @include font-rem(20px, 25px);


// Common Properties for Height, Posioning

@mixin order($height, $selectors...) {
	@for $i from 0 to length($selectors) {
		#{nth($selectors, $i + 1)} {
			height: $height;
			margin-top: $i * $height;
		}
	}
}

// Usage
//@include order(150px, "input.name", "input.address", "input.zip");

// Filter Mixin

@mixin prefix($property, $value, $prefixes) {
	@each $prefix in $prefixes {
		-#{$prefix}-#{$property}: $value;
	}
	#{$property}: $value;
}

// Usage

//   @include prefix(filter, grayscale(50%), moz webkit);

// Avtar Mixin

@mixin avatar($size, $circle: false) {
	width: $size;
	height: $size;

	@if $circle {
		border-radius: $size / 2;
	}
}

// Usage

// .square-av { @include avatar(100px, $circle: false); }
// .circle-av { @include avatar(100px, $circle: true); }

// Triangle Mixin

@mixin triangle($size, $color, $direction) {
	height: 0;
	width: 0;

	border-color: transparent;
	border-style: solid;
	border-width: $size / 2;

	@if $direction == up {
		border-bottom-color: $color;
	} @else if $direction == right {
		border-left-color: $color;
	} @else if $direction == down {
		border-top-color: $color;
	} @else if $direction == left {
		border-right-color: $color;
	} @else {
		@error "Unknown direction #{$direction}.";
	}
}



// Usage

//   @include triangle(5px, black, right);

// Transform Mixin

@mixin transform($property) {
	-webkit-transform: $property;
	-ms-transform: $property;
	transform: $property;
}

//  Usage

// .box { @include transform(rotate(30deg)); }

// Border Radius Mixin

@mixin border-radius($pixel...) {
	border-radius: $pixel;
	-moz-border-radius: $pixel;
	-webkit-border-radius: $pixel;
	-ms-border-radius: $pixel;
}

// Usage

// @include border-radius(10px 5px 20px 10px);

// Prefixes Mixin

@mixin prefix($property, $value, $vendors: webkit moz ms o, $default: true) {
	@if $vendors {
		@each $vendor in $vendors {
			#{"-" + $vendor + "-" + $property}: #{$value};
		}
	}
	@if $default {
		#{$property}: #{$value};
	}
}

// Usage

// @include prefix('box-sizing', 'inherit', moz webkit);

// Background Retina Mixin

@mixin retina($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
		(-o-min-device-pixel-ratio: 2.6/2),
		(-webkit-min-device-pixel-ratio: 1.3),
		(min-device-pixel-ratio: 1.3),
		(min-resolution: 1.3dppx) {
		/* Serving 2x image on Retina display */
		background-image: url($image);
		background-size: $width $height;
	}
}

// Usage

// .logo {
//   background-image: url("img/logo.png");
//     @include retina("img/logo@2x.png", 100px, 21px);
//   }

// Fluid Font Mixin

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
	$u1: unit($min-vw);
	$u2: unit($max-vw);
	$u3: unit($min-font-size);
	$u4: unit($max-font-size);

	@if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
		& {
			font-size: $min-font-size;
			@media screen and (min-width: $min-vw) {
				font-size: calc(
					#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
						((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
				);
			}
			@media screen and (min-width: $max-vw) {
				font-size: $max-font-size;
			}
		}
	}
}

// Icons for all page

@mixin icon($width, $height, $icon: false) {
	display: $display-inline-block;
	width: $width;
	width: ($width / $rem-base-font) * 1rem;
	height: $height;
	height: ($height / $rem-base-font) * 1rem;
	background: url(../images/common-icons.svg) no-repeat 0 0;
	@if $icon == true {
		margin-left: 0.6rem;
	} @else if $icon == false {
		margin-right: 0.6rem;
	} @else if $icon == null {
	}
}

// Usage

// @include icon(10px, 10px, (true));

@mixin fade($type) {
	@if $type == "hide" {
		visibility: hidden;
		opacity: 0;
		transition: visibility 1s, opacity 1s;
	} @else if $type == "show" {
		visibility: visible;
		opacity: 1;
		transition: visibility 1s, opacity 1s;
	}
}

// Usage

// .foo .bar {
//   @include fade(hide);
// }



// Responsive Mixin

// @mixin breakpoint($point) {
//   @if $point == lg {
//     @media (max-width:$lg-breakepoint) { @content ; }
//  }
//   @else if $point == md {
//     @media (max-width:$md-breakepoint) { @content ; }
//  }
//    @else if $point == sm {
//     @media (max-width:$sm-breakepoint) { @content ; }
//  }
//   @else if $point == xs {
//     @media (max-width:$xs-breakepoint)  { @content ; }
//  }
//  @else if $point == vs {
//     @media (max-width:$vs-breakepoint)  { @content ; }

//  }
// }


// Verticle align Mixin

@mixin vertical-align($align) {

	@if $align == top {
		vertical-align: $top-align;
	} @else if $align == middle {
		vertical-align: $middle-align;
	} @else if $align == bottom {
		vertical-align: $bottom-align;
  }  @else {
		@error "Unknown alignement #{$align}.";
	}

}

// Usage

// @include vertical-align(mdiddle);


// Margin Mixin

@mixin margin-direction($direction) {

	@if $direction == left {
		margin-left: auto;
	} @else if $direction == right {
		margin-right: auto;
	} @else if $direction == auto {
		margin-left: auto;
		margin-right: auto;
	} @else {
		@error "Unknown alignement #{$direction}.";
	}
}

// Usage 

// @include margin-direction(left);




// Flexbox interpolation 


@mixin flex($properties) {
    @if $properties == 'flex' {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
    } @else if $properties == 'inline-flex' {
        display: -ms-inline-flexbox;
        display: -webkit-inline-flex;
        display: inline-flex;
    } @else if $properties == 'inline-block' {
        display: inline-block;
    } @else if $properties == 'block' {
        display: block;
	} @else if $properties == 'none' {
        display: none;
	} @else if $properties == 'list-item' {
        display: list-item;
    }
}

@mixin flex-direction($properties) {
    -webkit-flex-direction: $properties;
    -ms-flex-direction: $properties;
    flex-direction: $properties;
}


@mixin flex-wrap($properties) {
    @if $properties == 'nowrap' {
        -webkit-flex-wrap: nowrap;
        -ms-flex-wrap: nowrap;
        flex-wrap: nowrap;
    } @else if $properties == 'wrap' {
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    } @else if $properties == 'wrap-reverse' {
        -webkit-flex-wrap: wrap-reverse;
        -ms-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
    }
}


@mixin flex-justify($properties) {
    @if $properties == 'flex-start' {
        -webkit-justify-content: flex-start;
        -ms-flex-pack: start;
        justify-content: flex-start;
    } @else if $properties == 'flex-end' {
        -webkit-justify-content: flex-end;
        -ms-flex-pack: end;
        justify-content: flex-end;
    } @else if $properties == 'center' {
        -webkit-justify-content: center;
        -ms-flex-pack: center;
        justify-content: center;
    } @else if $properties == 'space-between' {
        -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
        justify-content: space-between;
    } @else if $properties == 'space-around' {
        -webkit-justify-content: space-around;
        -ms-flex-pack: distribute;
        justify-content: space-around;
    }
}


@mixin flex-align-items($properties) {
    @if $properties == 'flex-start' {
        -webkit-align-items: flex-start;
        -ms-flex-align: start;
        align-items: flex-start;
    } @else if $properties == 'flex-end' {
        -webkit-align-items: flex-end;
        -ms-flex-align: end;
        align-items: flex-end;
    } @else if $properties == 'center' {
        -webkit-align-items: center;
        -ms-flex-align: center;
        align-items: center;
    } @else if $properties == 'baseline' {
        -webkit-align-items: baseline;
        -ms-flex-align: baseline;
        align-items: baseline;
    } @else if $properties == 'stretch' {
        -webkit-align-items: stretch;
        -ms-flex-align: stretch;
        align-items: stretch;
    }
}

@mixin flex-align-self($properties) {
    @if $properties == 'auto' {
        -webkit-align-self: auto;
        -ms-flex-item-align: auto;
        align-self: auto;
    } @else if $properties == 'flex-start' {
        -webkit-align-self: flex-start;
        -ms-flex-item-align: start;
        align-self: flex-start;
    } @else if $properties == 'flex-end' {
        -webkit-align-self: flex-end;
        -ms-flex-item-align: end;
        align-self: flex-end;
    } @else if $properties == 'center' {
        -webkit-align-self: center;
        -ms-flex-item-align: center;
        align-self: center;
    } @else if $properties == 'baseline' {
        -webkit-align-self: baseline;
        -ms-flex-item-align: baseline;
        align-self: baseline;
    } @else if $properties == 'stretch' {
        -webkit-align-self: stretch;
        -ms-flex-item-align: stretch;
        align-self: stretch;
    }
}

// Flexbox center

@mixin flex-center() {
	@include flex(flex);
    @include flex-align-items(center);
    @include flex-justify(center);
}